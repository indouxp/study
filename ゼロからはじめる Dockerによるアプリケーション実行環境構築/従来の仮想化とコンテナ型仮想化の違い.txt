- 仮想化のオーバーヘッド
  従来の仮想化: リソースのオーバーヘッドが大きく、起動停止に時間がかかる
  コンテナ型仮想化: アプリケーション実行に必要なものだけを含み、ホストOSのカーネルを使用するため、リソースの使用率が少ない

- アプリケーション実行の再現性
  従来の仮想化: 環境の違いで再現性を実現させるのが手間
  コンテナ型仮想化: 同じDockerイメージからコンテナを起動させることで、環境が変わっても同様の動作が可能

- OSの自由度
  従来の仮想化: インテルアーキテクチャー上で自由
　コンテナ型仮想化: ホストOSと同じであることが必要

- 分離レベル
  従来の仮想化: 分離レベルが高いため、他のVMとの分離レベルが高い
  コンテナ型仮想化: 従来の仮想化よりも分離レベルが低い

